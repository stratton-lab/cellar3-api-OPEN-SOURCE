"""
Django settings for Cellar3 (SingloCell) API project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

import yaml

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'YOUR_SECRET_KEY'

# Shows detailed error page if incorrect URL
DEBUG = os.getenv("DJANGO_DEBUG", "False") == "True"

# Deployment environment: development or production
DJANGO_ENV = os.environ.get('DJANGO_ENV', 'unknown')

# Private datasets are available in DEV but hidden in PROD
SHOW_PRIVATE_DATASETS = DJANGO_ENV == "development"

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = False

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_NAME = 'YOUR_COOKIE_NAME'
CSRF_COOKIE_NAME = 'YOUR_CSRF_TOKEN'
CSRF_TRUSTED_ORIGINS = [f'https://{domain}' for domain in ALLOWED_HOSTS if domain != 'localhost']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    'rest_framework',
    'src.cellar3'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware'
]

ROOT_URLCONF = 'urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATA_FOLDER = os.getenv("DJANGO_DATA_FOLDER", 'data')
CATEGORIES_FILE = os.path.join(DATA_FOLDER, 'categories.yaml')
DATASETS_FOLDER = os.path.join(DATA_FOLDER, 'datasets')  # h5ad files
PATHWAYS_FOLDER = os.path.join(DATA_FOLDER, 'pathways')
DATASETS_META_DB = os.path.join(DATA_FOLDER, "db.sqlite3")
SUBMISSIONS_FOLDER = os.path.join(DATA_FOLDER, 'submissions')

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": DATASETS_META_DB,
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

EMAIL_SERVER = 'YOUR_EMAIL_SERVER'  # Server used to send emails
# People to notify when a new dataset was submitted by a user
SUBMIT_NOTIFY_EMAILS = []

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'EST'

USE_I18N = True

USE_TZ = True

URL_PREFIX = os.getenv("DJANGO_URL_PREFIX", '/singlocell-api')
FORCE_SCRIPT_NAME = URL_PREFIX

STATIC_URL = f'{URL_PREFIX}/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = f'{URL_PREFIX}/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'data/media')

BACKEND_DEV_BASE_URL = 'YOUR_BACKEND_DEV_BASE_URL'
FRONTEND_DEV_BASE_URL = 'YOUR_FRONTEND_DEV_BASE_URL'  # Where to review submitted datasets
BACKEND_PROD_BASE_URL = 'YOUR_BACKEND_PROD_BASE_URL'
FRONTEND_PROD_BASE_URL = 'YOUR_FRONTEND_PROD_BASE_URL'
CONVERSION_SERVICE_URL = 'YOUR_CONVERSION_SERVICE_URL'  # API converting RDS to H5AD

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname}\t{name}\t{message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose"
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
        "cellar": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': []
}

# Overriding settings with yaml file
SETTINGS_FILE = 'etc/settings.yaml'
if os.path.isfile(SETTINGS_FILE):
    with open(SETTINGS_FILE, 'r') as file:
        yaml_settings = yaml.safe_load(file)
        if yaml_settings:
            for setting, value in yaml_settings.items():
                globals()[setting] = value

# TODO load settings from env. vars.
